# SRE Bot Main Configuration
# This is the main environment file for Docker Compose
# For service-specific configuration, see:
# - agents/.env.example (SRE Agent configuration)
# - slack_bot/.env.example (Slack Bot configuration)

# Database Configuration (shared across services)
POSTGRES_PASSWORD=postgres
DB_HOST=postgres
DB_PORT=5432
DB_NAME=srebot
DB_USER=postgres

# Global Logging Configuration
# Available levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Docker Compose Environment Variables
# These are used by docker-compose.yml for service orchestration

# API Keys (can be overridden in service-specific .env files)
GOOGLE_API_KEY=your_google_api_key_here

# AI Model Configuration
GOOGLE_AI_MODEL=gemini-2.0-flash

# AWS Configuration (mounted as volumes in Docker)
AWS_PROFILE=your_aws_profile
AWS_REGION=us-east-1

# AWS Role-Based Authentication Configuration
# Enable role-based authentication for cross-account AWS access

# Default region for AWS operations
AWS_AUTH_DEFAULT_REGION=us-east-1

# Default AWS profile (optional)
AWS_AUTH_DEFAULT_PROFILE=your_aws_profile

# Enable credential caching for better performance
AWS_AUTH_ENABLE_CACHING=true

# Cache TTL in seconds (default: 3000 = 50 minutes)
AWS_AUTH_CACHE_TTL=3000

# Enable role chaining for complex cross-account scenarios
AWS_AUTH_ENABLE_ROLE_CHAINING=false

# Simple single role configuration (for quick setup)
# AWS_AUTH_DEFAULT_ROLE_ARN=arn:aws:iam::123456789012:role/SRERole
# AWS_AUTH_DEFAULT_ACCOUNT_ID=123456789012
# AWS_AUTH_DEFAULT_ROLE_NAME=default
# AWS_AUTH_DEFAULT_SESSION_NAME=SREBotSession
# AWS_AUTH_DEFAULT_DURATION=3600
# AWS_AUTH_DEFAULT_EXTERNAL_ID=your_external_id

# Complex multi-role configuration (JSON format)
# AWS_AUTH_ROLES='{"production": {"role_arn": "arn:aws:iam::123456789012:role/ProdSRERole", "account_id": "123456789012", "duration_seconds": 7200}, "staging": {"role_arn": "arn:aws:iam::987654321098:role/StagingSRERole", "account_id": "987654321098", "external_id": "staging-external-id"}}'

# Example role configurations for different environments:
# Production account role
# AWS_AUTH_ROLES='{"prod": {"role_arn": "arn:aws:iam::111111111111:role/SRERole", "account_id": "111111111111"}}'

# Multiple accounts
# AWS_AUTH_ROLES='{"prod": {"role_arn": "arn:aws:iam::111111111111:role/SRERole", "account_id": "111111111111"}, "staging": {"role_arn": "arn:aws:iam::222222222222:role/SRERole", "account_id": "222222222222"}, "dev": {"role_arn": "arn:aws:iam::333333333333:role/SRERole", "account_id": "333333333333"}}'

# Kubernetes Configuration (mounted as volumes in Docker)
KUBE_CONTEXT=your_kube_context

# Network Configuration
COMPOSE_PROJECT_NAME=sre-bot

# Note: For production deployments, consider using Docker secrets
# or external secret management systems instead of environment files